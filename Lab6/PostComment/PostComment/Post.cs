//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostComment
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Runtime.Serialization;

    [DataContract(IsReference=true)]    
    public partial class Post
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Post()
        {
            this.Comments = new HashSet<Comment>();
        }
    
        [DataMember]
        public int PostId { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Domain { get; set; }
        [DataMember]
        public string Date { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        [DataMember]
        public virtual ICollection<Comment> Comments { get; set; }

        public bool AddPost()
        {
            using (var ctx = new ModelPostCommentContainer())
            {
                var bResult = false;
                if (this.PostId == 0)
                {
                    var it = ctx.Entry<Post>(this).State = EntityState.Added;
                    ctx.SaveChanges();
                    bResult = true;
                }
                return bResult;
            }
        }

        public Post UpdatePost(Post newPost)
        {
            using (var ctx = new ModelPostCommentContainer())
            {
                var oldPost = ctx.Posts.Find(newPost.PostId);
                if (oldPost == null)
                {
                    return null;
                }
                oldPost.Description = newPost.Description;
                oldPost.Date = newPost.Date;
                oldPost.Domain = newPost.Domain;
                ctx.SaveChanges();
                return oldPost;
            }
        }

        public int DeletePost(int id)
        {
            using (var ctx = new ModelPostCommentContainer())
            {
                return ctx.Database.ExecuteSqlCommand("Delete From Post where PostId = @p0", id);
            }
        }

        public Post GetPostById(int id)
        {
            using (var ctx = new ModelPostCommentContainer())
            {
                var item = ctx.Posts.Find(id);

                if (item == null)
                {
                    return null;
                }

                return item;
            }
        }

        public List<Post> GetAllPosts()
        {
            using (var ctx = new ModelPostCommentContainer())
            {
                return ctx.Posts.Include("Comments").ToList<Post>();
            }
        }
    }
}
